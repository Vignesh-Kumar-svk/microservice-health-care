version: "3.9"
services:
  patient-db:
    image: postgres:15-alpine
    container_name: patient-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: vignesh
      POSTGRES_DB: patientdb
    ports:
      - "5433:5432"
    networks:
      - hospital-network
    volumes:
      - patient-db-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin" ]
      interval: 5s
      timeout: 5s
      retries: 5


  redis:
    image: redis:alpine
    container_name: redis-local-test-2
    ports:
      - "6379:6379"
    networks:
      - hospital-network
    deploy:
      resources:
        limits:
          memory: 512m
          cpus: "0.5"

  appointment-db:
    image: postgres:15-alpine
    container_name: appointment-db
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: vignesh
      POSTGRES_DB: appointmentdb
    ports:
      - "5433:5432"
    volumes:
      - appointment-db-data:/var/lib/postgresql/data
    networks:
      - hospital-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - hospital-network

  broker:
    image: confluentinc/cp-kafka:7.5.0
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    networks:
      - hospital-network
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    healthcheck:
      test: [ "CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8086:8080"
    depends_on:
      - broker
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=broker:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    networks:
      - hospital-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  eureka-server-service:
    build:
      context: ./eureka-server-service
    container_name: eureka-server-service
    ports:
      - "8763:8763"
    environment:
      - EUREKA_CLIENT_REGISTERWITH_EUREKA=false
      - EUREKA_CLIENT_FETCHREGISTRY=false
    networks:
      - hospital-network

  api-gateway-service:
    build:
      context: ./api-gateway-service
    container_name: api-gateway-service
    ports:
      - "3000:3000"
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server-service:8763/eureka/
      spring.cloud.gateway.server.webflux.routes[0].id: patient-service
      spring.cloud.gateway.server.webflux.routes[0].uri: lb://patient-service
      spring.cloud.gateway.server.webflux.routes[0].predicates[0]: Path=/patients/**
      spring.cloud.gateway.server.webflux.routes[0].filters[0].name: CircuitBreaker
      spring.cloud.gateway.server.webflux.routes[0].filters[0].args.name: patientSvcCB
      spring.cloud.gateway.server.webflux.routes[0].filters[0].args.fallbackUri: forward:/fallback/patients
    depends_on:
      - eureka-server-service
    networks:
      - hospital-network

  patient-service:
    build:
      context: ./patient-service
    container_name: patient-service
    ports:
      - "8081:8081"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://patient-db:5432/patientdb
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: vignesh
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server-service:8763/eureka/
    depends_on:
      - patient-db
      - eureka-server-service
      - api-gateway-service
    networks:
      - hospital-network

  appointment-service:
    build:
      context: ./appointment-service
      dockerfile: Dockerfile
    container_name: appointment-service
    ports:
      - "8082:8082"
    networks:
      - hospital-network
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://appointment-db:5432/appointmentdb
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: vignesh
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server-service:8763/eureka/
      spring.data.redis.host: redis
      spring.data.redis.port: 6379
      spring.cache.type: redis
      SPRING_KAFKA_BOOTSTRAP_SERVERS: broker:9092
    depends_on:
      - appointment-db
      - eureka-server-service
      - redis
      - broker
      - api-gateway-service

  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    ports:
      - "8083:8083"
    networks:
      - hospital-network
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server-service:8763/eureka/
      SPRING_KAFKA_CONSUMER_GROUP_ID: notification-service-group
      SPRING_KAFKA_BOOTSTRAP_SERVERS: broker:9092
    depends_on:
      - appointment-service
      - eureka-server-service
      - broker



networks:
  hospital-network:
    driver: bridge

volumes:
  patient-db-data:
  appointment-db-data:
